/*
1. Function：函数(方法)对象
    1. 创建：
        1. var fun = new Function(形式参数列表,方法体);  //忘掉吧
        2.
            function 方法名称(形式参数列表){
                方法体
            }

        3.
           var 方法名 = function(形式参数列表){
                方法体
           }
    2. 方法：

    3. 属性：
        length:代表形参的个数
    4. 特点：
        1. 方法定义是，形参的类型不用写,返回值类型也不写。
        2. 方法是一个对象，如果定义名称相同的方法，会覆盖
        3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关
        4. 在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数
    5. 调用：
        方法名称(实际参数列表);

2. Array:数组对象
    1. 创建：
        1. var arr = new Array(元素列表);
        2. var arr = new Array(默认长度);
        3. var arr = [元素列表];
    2. 方法
        join(参数):将数组中的元素按照指定的分隔符拼接为字符串
        push()	向数组的末尾添加一个或更多元素，并返回新的长度。
    3. 属性
        length:数组的长度
    4. 特点：
        1. JS中，数组元素的类型可变的。
        2. JS中，数组长度可变的。
3. Boolean
4. Date：日期对象
    1. 创建：
        var date = new Date();
    2. 方法：
        toLocaleString()：返回当前date对象对应的时间本地字符串格式
        getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差
5. Math：数学对象
    1. 创建：
        * 特点：Math对象不用创建，直接使用。  Math.方法名();
    2. 方法：
        random():返回 0 ~ 1 之间的随机数。 含0不含1
        ceil(x)：对数进行上舍入。
        floor(x)：对数进行下舍入。
        round(x)：把数四舍五入为最接近的整数。
    3. 属性：
        PI
6. Number
7. String
8. RegExp：正则表达式对象
    1. 正则表达式：定义字符串的组成规则。
        1. 单个字符:[]
            如： [a] [ab] [a-zA-Z0-9_]
            * 特殊符号代表特殊含义的单个字符:
                \d:单个数字字符 [0-9]
                \w:单个单词字符[a-zA-Z0-9_]
        2. 量词符号：
            ?：表示出现0次或1次
            *：表示出现0次或多次
            +：出现1次或多次
            {m,n}:表示 m<= 数量 <= n
                * m如果缺省： {,n}:最多n次
                * n如果缺省：{m,} 最少m次
        3. 开始结束符号
            * ^:开始
            * $:结束
    2. 正则对象：
        1. 创建
            1. var reg = new RegExp("正则表达式");
            2. var reg = /正则表达式/;
        2. 方法
            1. test(参数):验证指定的字符串是否符合正则定义的规范
9. Global
    1. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();
    2. 方法：
        encodeURI():url编码
        decodeURI():url解码
        encodeURIComponent():url编码,编码的字符更多
        decodeURIComponent():url解码
        parseInt():将字符串转为数字
            * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number
        isNaN():判断一个值是否是NaN
            * NaN六亲不认，连自己都不认。NaN参与的==比较全部问false
        eval():讲 JavaScript 字符串，并把它作为脚本代码来执行。
    3. URL编码
       传智播客 =  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2
*/
